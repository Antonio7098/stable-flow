[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stable-flow"
version = "1.0.0"
description = "AI-Powered Documentation Generation for Software Projects"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
authors = [
    {name = "Stable Flow Development Team", email = "team@stableflow.dev"},
]
maintainers = [
    {name = "Stable Flow Development Team", email = "team@stableflow.dev"},
]
keywords = [
    "documentation",
    "ai",
    "templates",
    "software-development",
    "project-management",
    "jinja2",
    "yaml",
    "cli",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Documentation",
    "Topic :: Software Development :: Documentation",
    "Topic :: Utilities",
]
dependencies = [
    "Jinja2>=3.0.0",
    "PyYAML>=6.0",
    "Click>=8.0.0",
    "Rich>=13.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "memory-profiler>=0.61.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
]

[project.scripts]
stable-flow = "scripts.stable_flow:main"

[project.urls]
Homepage = "https://github.com/your-org/stable-flow"
Documentation = "https://github.com/your-org/stable-flow/docs/"
Repository = "https://github.com/your-org/stable-flow"
Issues = "https://github.com/your-org/stable-flow/issues"
Changelog = "https://github.com/your-org/stable-flow/CHANGELOG.md"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*", "examples", "examples.*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scripts.*",
]
ignore_errors = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["scripts"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\):",
    "@(abc\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "examples"]
skips = ["B101", "B601"]  # Skip assert checks and shell usage warnings</content>
</xai:function_call name="write">
<parameter name="file_path">MANIFEST.in

